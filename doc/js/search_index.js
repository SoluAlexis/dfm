var search_data = {"index":{"searchIndex":["dfm","file","hex()","name()","print_duplicates()","print_singles()","recurse()","license","readme","dfm.gemspec"],"longSearchIndex":["dfm","file","dfm#hex()","dfm#name()","dfm#print_duplicates()","dfm#print_singles()","dfm#recurse()","","",""],"info":[["DFM","","DFM.html","","<p>Class instance of DFM generates a list of files recursively and indexes the\nby both MD5 hexdigest and …\n"],["File","","File.html","",""],["hex","DFM","DFM.html#method-i-hex","( duplicates = true )","<p>Returns hash of duplicate files by MD5 hexdigest index.  If the parameter\nis set to false then the hash …\n"],["name","DFM","DFM.html#method-i-name","( duplicates = true )","<p>Returns hash of duplicate files by file name index.  If the parameter is\nset to false then the hash returns …\n"],["print_duplicates","DFM","DFM.html#method-i-print_duplicates","( opt = \"hex\" )","<p>Prints out JSON list of duplicate copy files by MD5 hexdigest index or if\nthe parameter is set to “name” …\n"],["print_singles","DFM","DFM.html#method-i-print_singles","( opt = \"hex\" )","<p>Prints out JSON list of single copy files by MD5 hexdigest index or if the\nparameter is set to “name” …\n"],["recurse","DFM","DFM.html#method-i-recurse","( path )","<p>Start a fresh recursive search with empty hash indexes. Accepts parameter\nfor path.  (See filters for …\n"],["LICENSE","","LICENSE.html","","<p>The MIT License (MIT)\n<p>Copyright © 2014 Daniel P. Clark\n<p>Permission is hereby granted, free of charge, …\n"],["README","","README_md.html","","<p>dfm\n===\n<p>Duplicate File Manager\n\n<pre>gem install dfm</pre>\n"],["dfm.gemspec","","dfm_gemspec.html","","<p>$:.push File.expand_path(“../lib”, __FILE__) require “dfm/version”\n<p>Gem::Specification.new …\n"]]}}